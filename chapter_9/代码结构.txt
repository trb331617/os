DATE: 20200313
===============


FILE: boot/mbr.asm
    | 加载loader，并跳转
    |
    |
FILE: boot/loader.asm
    | 调用BIOS中断获取内存大小；构建GDT，进入保护模式；加载kernel；创建页目录PD和页表PT，开启分页机制；
    | 解析kernel的ELF，将ELF文件中的段segment拷贝到各段自己被编译的虚拟地址处；跳转
    |
    |
FILE: kernel/main.c
    |
    |---- FILE: lib/print.asm       put_str("i am kernel\n");
    |       | 打印提示信息
    |       | 汇编实现打印函数(写入显存0xb_8000，loader阶段设为GDT第3号)，C语言调用
    |
    |---- FILE: kernel/init.c       init_all()
    |       | 初始化
    |       |
    |       |---- FILE: kernel/interrupt.c  idt_init() 
    |       |       | 初始化中断   
    |       |       | 构建IDT，这里IDT中的每一项都指向对应的一段汇编代码，再由汇编调用C语言中断处理函数
    |       |       | 初始化可编程中断控制器8259A，放开时钟中断0x20
    |       |       | 中断发生时，会根据IDTR中的IDT基地址+中断向量*8，跳转到对应的汇编代码
    |       |       |           
    |       |       |---- FILE: kernel/core_interrupt.asm
    |       |       |
    |       |       |---- FILE: lib/io.h
    |       |               | 内联汇编实现的读写端口函数
    |       |               | 凡是包含io.h的文件，都会获得一份io.h中所有函数的拷贝
    |       |               | inline是建议处理器将函数编译为内嵌方式，即在该函数调用处原封不动地展开
    |       |
    |       |---- FILE: kernel/memory.c     mem_init() 
    |       |       | 初始化内存管理系统
    |       |       | mem_pool_init()初始化内存池: 内核虚拟地址内存池、内核/用户物理内存池
    |       |       |   虚拟地址内存池: 虚拟地址bitmap、虚拟地址内存池起始地址
    |       |       |   物理内存池：物理内存bitmap、物理内存起始地址、物理内存池大小
    |       |       |    
    |       |       |---- FILE: lib/bitmap.c    bitmap_init()  bitmap_scan()  bitmap_set()
    |       |       |       | bitmap的基本操作
    |       |       |       |
    |       |       |       |---- FILE: lib/string.c    memset()
    |       |       |               | 内存/字符串的基本操作
    |       |       |    
    |       |       |---- FILE: kernel/debug.h      ASSERT()  PANIC()
    |       |               | 断言
    |       |               |
    |       |               |---- FILE: kernel/debug.c      panic_spin(__FILE__, __LINE__, __func__, __VA_ARGS__)
    |       |                       | 关中断，打印相关信息，while(1)使程序悬停
    |       |                       |
    |       |                       |---- FILE: kernel/interrupt.c      intr_disable();
    |       |                               | 关中断
    |       |
    |       |---- FILE: thread/thread.c     thread_init()
    |       |       | 初始化线程相关结构
    |       |       | list_init()初始化就绪队列、初始化全部队列
    |       |       | make_main_thread()将当前内核main函数创建为线程
    |       |       |   running_thread()通过esp得到PCB基地址(main线程的PCB在loader阶段已分配)
    |       |       |   init_thread()在PCB中初始化线程基本信息: 状态 优先级 嘀嗒时间数 ...
    |       |       |   list_append()加入全部队列
    |       |       |     
    |       |       |---- FILE: list/list.c
    |       |               | 结点: struct list_elem{struct list_elem *prev; struct list_elem *next; };
    |       |               | 链表: struct list{struct list_elem head; struct list_elem tail; };
    |       |               | 对链表的一些修改操作需关中断来确保原子操作
    |       |       
    |       |---- FILE: device/timer.c      timer_init()
    |               | frequency_set()初始化可编程定时计时器8253
    |               |   使用8253来给IRQ0引脚上的时钟中断信号“提速”，使其发出的中断信号频率快一些。
    |               |   默认的频率是18.206Hz，即一秒内大约发出18 次中断信号。
    |               |   通过对8253编程，使时钟一秒内发100次中断信号，即中断信号频率为100Hz.
    |               |    
    |               |---- FILE: kernel/interrupt.c      register_handler(0x20, intr_timer_handler)
    |                       | 注册安装中断处理程序idt_table[vector_id] = function
    |                       | 
    |                       |---- FILE: device/timer.c      intr_timer_handler()
    |                       |       | 时钟的中断处理函数
    |                               | running_thread()通过esp得到PCB基地址
    |                               | if(current_thread->ticks == 0)  
    |                               |     schedule();           // 若进程时间片用完，就开始调度新的进程上CPU
    |                               | else
    |                               |     current_thread->ticks--;  // 将当前进程的时间片-1
    |                               |
    |                               |---- FILE: thread/thread.c     schedule()
    |                                       | 任务调度
    |                                       | 若状态为RUNNING, 则添加到就绪队列尾并重置ticks、状态改为READY
    |                                       | 就绪队列第一个就绪线程弹出, 由结构体成员地址得到首地址, 这里即为PCB基地址
    |                                       | 修改状态为RUNNING
    |                                       |
    |                                       |---- FILE: thread/switch.asm   switch_to(current_thread, next);
    |                                               | 切换栈、切换执行流eip
    |                                               | *********************************************
    |                                               | 此处的理解需结合线程栈信息struct thread_stack和函数thread_create()
    |                                               | *********************************************
    |                                               | 保存current线程的寄存器, 将next线程的寄存器装载到处理器
    |                                               | 传入的2个参数自动压入了current栈中, 这2个参数为2线程PCB基地址
    |                                               | PCB底部为线程/进程信息struct task_struct, 第一个成员为栈顶地址
    |                                               | 切换栈: 伪代码 mov [current], esp; mov esp, [next];
    |                                               | 切换执行线程: ret。这里利用了ret的特性, 自动从栈弹出给eip
    |                                               |         栈中存放eip处, 已由函数thread_create赋值为kernel_thread()
    |                                               |
    |                                               |---- FILE: thread/thread.c     kernel_thread(function, func_arg)
    |                                                       | 执行创建线程时指定的函数
    |                                                       | 这里2个参数的值已由函数thread_create赋值在栈中
    |                                                       | intr_enable()开中断, 避免时钟中断被屏蔽而无法调度其它线程    
    |                                                       | function(func_arg)执行新线程，
    |
    |---- FILE: thread/thread.c     thread_start()
    |       | 创建一个线程并执行
    |       | get_kernel_pages(1)内核空间中申请一页内存作为线程PCB(线程栈也在其中)
    |       |   PCB底部为线程/进程信息struct task_struct, PCB顶部为栈空间
    |       |
    |       | init_thread()在PCB底部 初始化线程基本信息: 状态 优先级 嘀嗒时间数 ...
    |       | thread_create()初始化线程栈: 中断使用的栈信息struct intr_stack, 线程栈信息struct thread_stack, 线程栈
    |       |   线程栈信息struct thread_stack: 栈顶为寄存器和eip(指向kernel_thread函数)和返回地址
    |       |                                  跳过返回地址栈顶+4为参数function、栈顶+8为参数func_arg
    |       | list_append()加入就绪队列、全部队列
    |       |
    |       |---- FILE: kernel/memory.c     get_kernel_pages();
    |               | 申请内核空间中的内存
    |               |   1) 虚拟内存池中申请连续的虚拟页 vaddr_get()
    |               |   2) 依次为每一个虚拟页在物理内存池中申请物理页 palloc()
    |               |   3) 在页表中完成虚拟地址和物理地址的映射 page_table_add()
    |
    |---- while(1)






